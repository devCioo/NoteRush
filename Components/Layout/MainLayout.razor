@using BitzArt.Blazor.Cookies
@inherits LayoutComponentBase
@inject ICookieService CookieService

<MudThemeProvider @bind-IsDarkMode="IsDarkMode" Theme="Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <NavBar OnMenuToggle="() => NavMenuOpen = !NavMenuOpen" OnThemeToggle="ChangeTheme" IsDarkMode="IsDarkMode" />
    <NavMenu Open="NavMenuOpen" />
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square id="blazor-error-ui">
    <MudStack Row Spacing="1">
        <MudText>@Localizer["UnhandledError"]</MudText>
        <MudLink Href="">@Localizer["Refresh"]</MudLink>
    </MudStack>
</MudAlert>

@code {
    private MudTheme Theme = new MudTheme
    {
        PaletteLight = new PaletteLight
        {
            Surface = Colors.Shades.White  
        },
        PaletteDark = new PaletteDark
        {
            Surface = Colors.Shades.White
        },
        Typography = new Typography
        {
            Button = new ButtonTypography
            {
                FontWeight = "700"  
            },
            Body1 = new Body1Typography
            {
                FontWeight = "700"
            },
            Default = new DefaultTypography
            {
                FontFamily = new[] { "Quicksand" },
                FontWeight = "700"
            },
            H1 = new H1Typography
            {
                FontWeight = "700"
            },
            H5 = new H5Typography
            {
                FontWeight = "700"
            },
        }
    };

    private bool IsDarkMode { get; set; }
    private bool NavMenuOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetThemePreference();
    }

    private async Task ChangeTheme(bool isDarkMode)
    {
        IsDarkMode = isDarkMode;
        await CookieService.SetAsync("DarkMode", IsDarkMode.ToString(), new DateTimeOffset(DateTime.MaxValue));
    }

    private async Task GetThemePreference()
    {
        var cookie = await CookieService.GetAsync("DarkMode");
        IsDarkMode = cookie != null ? bool.Parse(cookie.Value) : false;
    }
}

<style>
    #blazor-error-ui {
        color-scheme: light only;
        background: lightyellow;
        bottom: 0;
        box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
        box-sizing: border-box;
        display: none;
        left: 0;
        padding: 0.6rem 1.25rem 0.7rem 1.25rem;
        position: fixed;
        width: 100%;
        z-index: 1000;
    }

    #blazor-error-ui .dismiss {
        cursor: pointer;
        position: absolute;
        right: 0.75rem;
        top: 0.5rem;
    }
</style>